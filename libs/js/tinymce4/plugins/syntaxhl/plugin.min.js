tinymce.PluginManager.add('syntaxhl', function(editor, url) {
	function showDialog() {
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, linkListCtrl = null;

		function buildLinkList() {
			var linkListItems = [{text: 'None', value: ''}];

			tinymce.each(editor.settings.link_list, function(link) {
				linkListItems.push({
					text: link.text || link.title,
					value: link.value || link.url,
					menu: link.menu
				});
			});

			return linkListItems;
		}

		function updateText() {
			if (!initialText && data.text.length === 0) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');
		if (anchorElm) {
			selection.select(anchorElm);
		}

		data.text = initialText = selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';
		data.target = anchorElm ? dom.getAttrib(anchorElm, 'target') : '';

		if (selectedElm.nodeName == "IMG") {
			data.text = initialText = " ";
		}

		if (editor.settings.link_list) {
			linkListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Link list',
				values: buildLinkList(),
				onselect: function(e) {
					var textCtrl = win.find('#text');

					if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
						textCtrl.value(e.control.text());
					}

					win.find('#href').value(e.control.value());
				}
			};
		}

		win = editor.windowManager.open({
			title: 'Insert link',
			data: data,
			body: [
//				{name: 'text', type: 'textbox', size: 40, label: 'Title', autofocus: true, onchange: function() {
//					data.text = this.value();
//				}},
				linkListCtrl,
				{name: 'target', type: 'listbox', label: 'Category', values: [
					{text: 'Plain(Text)', value: ''},
					{text: "AppleScript", value: "applescript"},
					{text: "ActionScript3", value: "as3"},
					{text: "Bash(Shell)", value: "bash"},
					{text: "Cold Fusion", value: "coldfusion"},
					{text: "C#", value: "csharp"},
					{text: "C++", value: "cpp"},
					{text: "CSS", value: "css"},
					{text: "Delphi", value: "delphi"},
					{text: "Diff", value: "diff"},
					{text: "Erlang", value: "erlang"},
					{text: "Groovy", value: "groovy"},
					{text: "Java", value: "java"},
					{text: "JavaFX", value: "javafx"},
					{text: "Jscript", value: "jscript"},
					{text: "Perl", value: "perl"},
					{text: "PHP", value: "php"},
					{text: "Plain(Text)", value: "plain"},
					{text: "PowerShell", value: "powershell"},
					{text: "Python", value: "python"},
					{text: "Ruby", value: "ruby"},
					{text: "SASS", value: "sass"},
					{text: "Scala", value: "scala"},
					{text: "SQL", value: "sql"},
					{text: "VB", value: "vb"},
					{text: "XML/XHTML", value: "xml"}
				]},
				{
					type: 'textbox',
					name: 'href',
					multiline: true,
					autofocus: true,
					minWidth: 600,
					minHeight: 400,
					value: editor.getContent(),
//					onchange: updateText,
//					onkeyup: updateText
				}				
			],
			onSubmit: function(e) {
				var data = e.data;

				if (!data.href) {
					editor.execCommand('unlink');
					return;
				}

				if (data.text != initialText) {
					if (anchorElm) {
						editor.focus();
						anchorElm.innerHTML = data.text;

						dom.setAttribs(anchorElm, {
							href: data.href,
							target: data.target ? data.target : null
						});

						selection.select(anchorElm);
					} else {
						editor.insertContent(dom.createHTML('pre', {
							class: "brush: " + data.target
						}, data.href));
					}
				} else {
					editor.execCommand('mceInsertLink', false, {
						href: data.href,
						target: data.target
					});
				}
			}
		});
	}

	editor.addButton('syntaxhl', {
		image : url + '/img/highlight.gif',
		tooltip: 'Insert code using Syntaxhighlighter',
		shortcut: 'Ctrl+K',
		onclick: showDialog,
		stateSelector: 'a[href]'
	});

	editor.addShortcut('Ctrl+H', '', showDialog);

	this.showDialog = showDialog;

	editor.addMenuItem('syntaxhl', {
		text: 'Insert code using Syntaxhighlighter',
		shortcut: 'Ctrl+H',
		onclick: showDialog,
		stateSelector: 'a[href]',
		context: 'insert',
		prependToContext: true
	});
});